/**
 * 
 * 
 * 

// install redux toolkit
// npm i @reduxjs/toolkit npm i react-redux


// CREATE THE USER DATA SLICE
// userSlice.js (ignore the functions getPosition, fetchAddress & getAddress for now - comment it out)
	// 1.) create the initial state object
				const initialState = {
					username = 'Newman'
				}
	
	// 2.) create the userSlice object which would have the reducer which action types handler defined
			const userSlice = createSlice({
				name: 'user'
				initialState,
				reducers: {
					updateName(state, action) {
						state.username = action.payload
					}
				}
			}

	// export the reducer & the automatically created actions
			export const {updateName} = userSlice.actions
			export default userSlice.reducer
)



// SETUP THE STORE
// src/store.js
			import {configureStore} from "@reduxjs/toolkit"
			import {userReducer} from './features/user/userSlice';

			const store = configureStore({
				reducer: {
					user: userReducer
				}
			})

			export default store;



// BROADCAST STORE TO THE APPLICATION
// @app.jsx
		
		...
		import {Provider} from 'react-redux';
		import store from './store';


			<React.StrictMode>
					<Provider store={store}>
							<App />
					</Provider>
			</React.StrictMode>


// CONSUME THE USERNAME STATE IN THE STORE
// @Username.jsx
		function Username(){
			const username =  useSelector(state => state.user.username)

			if (!username) return null

			return(
				...
			)
		}


// UPDATE THE USERNAME STATE IN THE STORE VIA AN ACTION
// in the homepage, the start ordering button updates the username in the store
// @CreateUser.jsx

		import {updateName} from './userSlice'
		import {useDispatch} from 'react-redux'

		const [username, setUsername] = useState("") // local state that keeps track of entry to the input
		const dispatch = useDispatch()
		const navigate = useNavigate()

		function handleSubmit(e) {
			e.preventDefault();

			if (!username) return;

			dispatch(updateName(username));

			navigate('/menu')
		}

// CONSUME THE STORE USERNAME STATE IN THE HOME COMPONENT, CART COMPONENT & 
// @Home.jsx

		import Button from './Button'

		const username = useSelector(state => state.user.username)

		...

		{username == '' ? <CreateUser /> : <Button type='primary' to='/menu'>Continue Ordering, {username}<Button>}

	@Cart.jsx
		
		const username = useSelector(state => state.user.username)

		<h2>...{username}</h2>

	@CreateOrder.jsx
		
		const username = useSelector(state => state.user.username)

		...

		<input
			...
			defaultValue = {username}
		/>




// CREATE THE CART DATA SLICE
//@cartSlice.js

		const initialState = {
			cart: [
				{
					pizzaId: 12,
					name: 'Mediterranean',
					quantity: 2,
					unitPrice: 16,
					totalPrice: 32

				}
			],
		}


		const cartSlice = createSlice({
			name: cart
			initialState,
			reducers: {
				addItem(state, action) {
					// payload = newItem
					state.cart.push(action.payload);
				},

				deleteItem(state, action) {
					// payload = pizzaId
					state.cart = state.cart.filter(item => item.pizzaId !== action.payload)
				},

				increaseItemQuantity(state, action) {
					// payload = pizzaId (of the cart item to increment)
					const item = state.cart.find(item => item.pizzaId == action.payload)
					item.quantity += 1;
					item.totalPrice = item.quantity * item.unitPrice;
				},

				deleteItemQuantity(state, action) {
					// payload = pizzaId (of the cart item to increment)
					const item = state.cart.find(item => item.pizzaId == action.payload)
					item.quantity -= 1;
					item.totalPrice = item.quantity * item.unitPrice;
				},

				clearCart(state) {
					state.cart = []
				}
			}
		})


		export default cartSlice.reducer;
		export const {
			addItem, 
			deleteItem, 
			increaseItemQuantity, 
			deleteItemQuantity, 
			clearCart
		} = cartSlice.actions;

// @store.js
		import cartReducer from './features/cart/cartSlice';

		const store = configureStore({
			reducer: {
				user: userReducer,
				cart: cartReducer
			}
		})



// PERFORM ACTIONS ON THE STORE CART DATA
// @MenuItem.jsx
// (if a menu item is sold out do not display the 'Add to Cart' Button)
// (place an onclick event on the Button custom component that calls the handleAddToCart function)
// (set this onclick property as a prop in the Button custom component, if this prop has a value, return another similar button but it has its onclick property setup )

		@MenuItem.jsx
		{!soldOut && <Button ... onClick={handleAddToCart}>...</Button>}

		@Button.jsx
		function Button({..., onClick}) {
			...

			if (onclick)
				return <button onClick={onClick} ...>...</button>

			...
		}

		@MenuItem.jsx
		function handleAddToCart(){
			const newItem = {
				pizzaId: id,
				name,
				quantity: 1,
				unitPrice,
				totalPrice: unitPrice * 1
			}

			dispatch(addItem(newItem))
		}

--------@@ USE THE REDUX DEV TOOLS TO CHECK IF THE ACTION WORKED @@--------




// CONSUME STORE CART DATA IN THE CARTOVERVIEW COMPONENT
//@CartOverview.jsx

		const totalCartQuantity = useSelector(
			state => state.cart.cart.reduce(
				(sum, item) => sum = sum + item.quantity,
				0
			)
		)

		// redux advise we do it like this, that this function should be in the select
		// redux also advice a refactor, such that the selection function is place in the cartSlice script, better centralization
		// @cartSlice.js
				...
				export const getTotalCartQuantity = (state) => state.cart.cart.reduce( (sum, item) => sum = sum + item.quantity, 0 )

		//CartOverview.jsx
		   import { getTotalCartQuantity } from './cartSlice'
		   const totalCartQuantity = useSelector(getTotalCartQuantity)

		// also create a selector function to compute the quantity
		//@cartSlice.js
				...
				export const getTotalCartPrice = (state) => state.cart.cart.reduce( (sum, item) => sum = sum + item.totalPrice, 0 )

		//CartOverview.jsx
		import { getTotalCartPrice } from './cartSlice'
		const totalCartPrice = useSelector(getTotalCartPrice)

		...

		<span>{totalCartQuantity} pizzas</span>
		<span>{formatCurrency(totalCartPrice)}</span>

		//CartOverview.jsx
		// if there is no cart items, that CartOverview UI should not show
		if (!totalCartQuantity) return null;
	
--------@@ BY THE WAY, HAVING SELECTORS LIKE THIS MIGHT CAUSE PERFORMANCE ISSUES IN LARGER APPLICATION - IF YOU ARE SERIOUS ABOUT REDUX, LOOK INTO THE RESELECT LIBRARY THAT WOULD ALLOW US OPTIMIZE THIS SELECTORS  @@--------



// CONSUME STORE CART DATA IN THE CART COMPONENT FUNCTION
// @Cart.jsx

				// @cartSlice.js (note that centralization is an huge advantage that fosters scalability)
				export const getCart = state => state.cart.cart

				// @Cart.jsx
				const cart = useSelector(getCart)
				...
				<Button type="secondary" onClick={() => dispatch(clearCart())}>Clear Cart</Button>
				 
				// @Cart.jsx
				// if no item in the cart we would render a component called EmptyCart component
				if (!cart.length) return <EmptyCart />

				// @EmptyCart.jsx
				<div className='px-4 py-3'>
					<LinkButton to="/menu">$larr; Back to menu</LinkButton>
					<p className="font-semibold mt-7">
						Your cart is still empty. Start adding some pizzas :)
					</p>
				</div>


// PERFORM A DELETE ACTION ON THE STORE CART DATA (Deleting Cart Items @Menu-Page, @Cart-Page)
// this delete button will be located in the cart page beside each item in the cart.
// this delete button will also be located in the menu page. to delete a menu item that has been added to cart
// therefore we need a delete button component
				// @DeleteItem.jsx (src/features/cart/DeleteItem)
				import Button from '../ui/Button'
				import {useDispatch} from 'react-redux'
				import {deleteItem} from './cartSlice'

				function DeleteItem({pizzaId}) {
					const dispatch = useDispatch();

					return <Button 
								type="small"
								onClick={() => dispatch(deleteItem(pizzaId))}
							>
								Delete
						   </Button>
				}

				export default DeleteItem;

				// @CartItem.jsx
				...
				<DeleteItem pizzaId={pizzaId}/>

				// @MenuItem.jsx
				const currentQuantity = useSelector(getCurrentQuantityById(id))
				const isInCart = currentQuantity > 0

				...

				{isInCart && <DeleteItem pizzaId={id}/>}

				// @cartSlice.js
				export const getCurrentQuantityById = (state) => state.cart.cart.find(item => item.pizzaId === id )?.quantity ?? 0;

				...

				{!soldOut && !isInCart && (
					<Button ...>Add to Cart</Button>
				)}



// PERFORM A UPDATE QUANTITY ACTION ON THE STORE CART DATA (UPDATING THE CART QUANTITY)
// @UpdateItemQuantity.jsx
// for each cart item, we want to see the quantity, we want a button to increment & decrement
// this would appear in the cart page, this would also appear in the menu page
				
				// @UpdateItemQuantity.jsx
				function UpdateItemQuantity({pizzaId}) {
					return (
						<div>
							<Button type='round'>-</Button>
							<Button type='round'>+</Button>
						</div>
					)
				}
 
				// @CartItem.jsx
				...
				<UpdateItemQuantity pizzaId={pizzaId} />
				...

				// @Button.jsx
				...
				const styles = {
					...
					round: base + ' px-2.5 py-1 md:px-3.5 md:py-2 text-sm'
				}
				
				// @UpdateItemQuantity.jsx
				function UpdateItemQuantity({pizzaId}) {
					return (
						<div className='flex gap-1 items-center md:gap-3'>
							<Button type='round' onClick={() => dispatch(decreaseItemQuantity(pizzaId))}>-</Button>
							<Button type='round' onClick={() => dispatch(decreaseItemQuantity(pizzaId))}>+</Button>
						</div>
					)
				}

				// @cartSlice.jsx
				// we need to fix an issue
				// once the item has been reduced to zero, the cart item will delete
				// the best place to do this is in the reducer, the decreaseItemQuantity action
				// in the reducer, in the decreaseItemQuantity action, its best to reuse the deletItem functionality HOW?

				...
				decreaseItemQuantity(state, action) {
					...
					if(item.quantity <== 0) cartSlice.caseReducers.deleteItem(state, action);
				}

				// @CartItem.jsx
				...

				const currentQuantity = useSelector(getCurrentQuantityById(pizzaId))

				...

				<UpdateItemQuantity pizzaId={pizzaId} currentQuantity={currentQuantity} />


				// @UpdateItemQuantity.jsx
				function UpdateItemQuantity({pizzaId, currentQuantity}) {
					...


					return (
						<div className='flex gap-2 items-center md:gap-3'>
							<Button type='round' onClick={() => dispatch(decreaseItemQuantity(pizzaId))}>-</Button>
							<span className='text-sm font-medium'>{currentQuantity}</span>
							<Button type='round' onClick={() => dispatch(decreaseItemQuantity(pizzaId))}>+</Button>
						</div>
					)
				}

				// @MenuItem.jsx
				// time to reuse the update item quantity section
				...
				{
					isInCart && <div className="flex items-center gap-3 sm:gap-8">
						<UpdateItemQuantity pizzaId={id} currentQuantity={currentQuantity} />
						<DeleteItem pizzaId={id} />
					</div>
				}



// CONSUME STORE CART DATA IN THE CreateOrder COMPONENT FOR SUBMISSION
// instead of submitting with the fake cart, we would get the cart data from the store
// @CreateOrder.jsx
		const cart = useSelector(getCart);

		if (!cart.length) return <EmptyCart />



// PERFORM THE CLEAR CART ACTION OUTSIDE A COMPONENT
// what we want is, After the order has been placed, the application is redirected to the order page
// this is not as easy as it sounds. to understand LET ME TELL A STORY

			// CHAPTER 1: REACT-ROUTER-6 DATA ACTIONS
					- remember with the new DATA ACTIONS FEATURE in react-router@6,
					- we have a 'Form' Component such that if a submit button is clickec,
					- it will encapsulate the name/value of the form field element in it in an object
					- then send to a function, an action function we will specify
					- this action function is already attached to the 'Route'.
					- its this function that performs asynchronous activity with this data LIKE posting it to a server
					- WHY THIS STORY?

			// CHAPTER 2: REDIRECTING WITHOUT useNavigate HOOK
					- why the story in chapter 1
					- you see, it in this funtion that we redirect to the ORDER PAGE
					- remember 
					- to redirect to another page we had to use the 'useNavigate hook' from react router.
					- hooks are only used in react components
					- therefore react-router provides a way around this. 
					- by default they pass a function called 'redirect' to our action function. 
					- we use this function to navigate to another route
					- OKAY BUT WHY THIS NEW STORY?

			// FINAL CHAPTER: DISPATCHING ACTION WITHOUT useDispatch HOOK
					- okay why the story in chapter 2
					- you see, 
					- we need to dispatch a clearCart action 
					- but we cannot use the 'useDispatch hook' in the action function as it is not a react component
					- so what do we do? we go back to the first principle, we go back to initial redux

					- this means we will call the dispatch function on the store itself 

							...
							store.dispatch(clearCart()))
							redirect(`/order/${newOrder.id}`)

					- BUT PLEASE, DO NOT OVERUSE THIS BECAUSE useDispatch HOOK BY REACT-REDUX DO SOME OPTIMIZATION BEHIND THE SCENES







// CONSUME THE CART DATA INTO THE CREATEORDER COMPONENT
// what do we want
		- we want to display the total prize of pizzas in our cart on the create order button, 
		- it will be beside the create order text
		- the total price is computed from the the store cart data
		- but also the total price can increase by 20% if the priority check box is checked

		@CreateOrder.jsx
		...
		const totalPrice = useSelector(getTotalCartPrice)
		...
		<Button ...>
			...
			`Order now for ${formatCurrency(totalPrice)}`


		@CreateOrder.jsx - adding priority
		const [withPriority, setWithPriority] = useState(false);
		...
		const totalCartPrice = useSelector(getTotalCartPrice)
		const priority = withPriority ? totalCartPrice * 0.2 : 0
		const totalPrice = totalCartPrice + priority
		...
		<input
			...
			value={withPriority}
			onChange={(e) => setWithPriority(prev => !prev)}
		/>
		...
		export async function action({request}){
			...
			const order = {
				...
				priority: data.priority === 'true',

			}
		}


// IMPLEMENTING THE GEO-LOCATION FEATURE: ASYNCHRONOUSITY WITH THUNKS IN REDUX TOOLKIT (SETTING UP A MIDDLEWARE)
// what do we want to do?
	- we want to add a button close to the address input field IN CreateOrder.jsx
	- this button would get user's location, store users address in the store and fill in the input field with the address

// previously, we have talked about how to set up middleware with thunks in redux. 
		- a middleware is needed because we want to deal with asynchronous operations but cannot in a reducer.
		- the way we do it is, 
		- our action creators return an async function instead of returning an action object. 
		- this async function does whatever asynchronous task & within it, dispatches actions to the store.
		- plus when configuring the store, we tell it to use thunks
// with redux toolkit, we have a way of doing this BY USING THE createAsyncThunk funtion.
		- first, we use the createAsyncThunk function to create an action creator
		- second, we can create a special reducer which would embody an asynchronous operation


		@userSlice.js
		STEP 1: WE CREATE THE ACION CREATOR WITH createAsyncThunk

			export const fetchAddress = createAsyncThunk(
				'user/fetchAddress', 
				async function () {

					// 1. we get the user's geolocation position
					...
					const position = ...

					// 2. we use a reverse geocoding API to get the description of user's address
					...
					const address = `...`

					// 3. we return a payload
					return {position, address}

				}

			)


		STEP 2: WE CREATE A SPECIAL REDUCER THAT HANDLES THE PENDING, FULFILLED & REJECTED STATE OF THE ASYNCHRONOUS FUNCTION

			const initialState = {
				username: '',
				status: 'idle',
				position: {},
				address: '',
				error: '',

			}

			const userSlice = createSlice( {
				...
				extraReducers: (builder) => 
										builder
											.addCase(
												fetchAddress.pending,
												(state, action) => {
													state.status = 'loading'
												})
											.addCase(
												fetchAddress.fulfilled,
												(state, action) =>{
													state.status = 'idle'
													state.position = action.payload.position;
													state.address = action.payload.address
												})
											.addCase(
												fetchAddress.rejected,
												(state, action) =>{
													state.status = 'error';
													state.error = 'There was a problem getting your address. Make sure to fill this field!';
												})
			})

			// notice the chaining in the extra reducers
			// notice the addCase has 2 parameters: the asynchronous status & the reducer blueprint
			// notice that the action type was specified in the the fetchAddress function
			// notice it is called fetchAddress not getAddress AS THIS IS NOT A SELECTOR
			// notice we have 3 reducers 
					- 'user/fetchAddress/pending'
					- 'user/fetchAddress/fulfilled'
					- 'user/fetchAddress/rejected'



		TEST: 
			- lets create a button in our component that would dispatch this action
			- then use the redux dev tools to set how it works



	@CreateOrder.jsx - place the get position button
	...
	<div className='... relative'>
		<label ...>Address</label>
		<input ... />
		<span className="absolute right-[3px] top-[3px] z-50 md:right-[5px] md:top-[5px]">
			<Button
				type="small"
				onClick={(e) => {e.preventDefault();  dispatch(fetchAddress())}}
			>
				GET POSITION
			</Button>
		</span>
	</div>
	...


	@CreateOrder.jsx - consume the status, address, position data in user state
	...
	const {username, status: addressStatus, address, position, error: errorAddress} = useSelector(state => state.user)
	const isAddressLoading = addressStatus === 'loading';
	...
	<Form>
		...
		<div ...>
			...
			<input disabled={isAddressLoading} defaultAddress={address} ... />
			{!position.latitude && !position.longitude && <span ...>
				<Button disabled={isAddressLoading} ...> ... </Button>
			</span>}
		</div>
		...
		<div>
		...
		<div>
			...
			<Button disable={isSubmitting || isLoadingAddress} ...>
				...
			</Button>
		</div>
	</Form>


	@CreateOrder.jsx - display geolocation fetch error
	...
	<div ...>
		<label ...>Address</label>
		<div ...>
			<input ... />
			{addressStatus === 'error' && (
				<p className='mt-2 rounded-md bg-red-100 p-2 text-xs text-red-700'>{errorAddress}</p>
			)}
			...
		</div>
	</div>
	...


	@CreateOrder.jsx - submit user gps position using an hidden input IF geolocation fetching was succesful
	...
	<div>
		<input 
			type="hidden" 
			name="cart" 
			value={JSON.stringify(cart)} 
		/>
		<input 
			type="hidden" 
			name="position" 
			value={position.longitude && position.latitude 
						? `${position.latitude}, ${position.longitude` 
						: ''
			}
		/>



// FETCHING MENU DATA IN THE ORDERID PAGE
// what do we want to do?
	PREFACE
		- in the orderId page, 
		- we show a list of pizza item that user ordered
		- we also want to show the ingredient of the item.

	PROBLEM
		- the problem is 
		- the cart data of the item does not contain the ingredients data 
		- this data is in the menu data of the item.
		- bottom line is that we need to call the menu page loader in this orderId page.

		- we do not want to rewrite the fetching logic as we used it in the menu page
		- BUT that logic is attached to the menu page.

	SOLUTION
		- react router 6 gives us a way.
		- we can use data loaders attached to another page.
		- this is done via the useFetcher hook
		- it returns the fetcher object with 3 main properties 
			- 'load'
			- this can calls a data loader attached to any route

			- 'data'
			- this stores the result when the load is called

			- 'state'
			- this keeps track of the asynchronous activity when the load is called.
			- 'idle', 'loading', 'error'


	@Order.jsx
	...
	const fetcher = useFetcher()

	useEffect(
		function () {
			if (!fetcher.data && fetcher.state === 'idle') {
				fetcher.load('/menu')
			}
		}, [fetcher]
	)

	...

	<ul ...>
		{cart.map( item => (
				<OrderItem 
					item={item} 
					key={item.pizzaId} 
					ingredients={fetcher.data?.find(el => el.id === item.pizzaId).ingredients ?? []}
					isLoadingIngredients={fetcher.state === 'loading'}
			)
		)}
	</ul>


	@OrderItem
	'...
	<li ...>
		<div>...</div>
		<p className="text-sm capitalize italic text-stone-500">
			{
				isLoadingIngredients ? 'Loading...' : ingredients.join(',')
			}
		</p>
	</li>
	...


// Update Order Information (an update request without navigation)
// once an order has been placed, 
// we want to give users an opportunity to make the order a priority
// this means we need to send a PATCH REQUEST to that orderId

// 

		@UpdateOrder.jsx
		function UpdateOrder({order}) {
			return (
				<Button type="primary">Make priority</Button>
			)
		}


		@Order.jsx
		...
		<div>
			...
			{!priority && <UpdateOrder order={order} />}
		</div>


		@UpdateOrder.jsx
		// similar to the Form component but this does not navigate away from the page
		// it will simple submit the form & revalidate the page

		...
		const fetcher = useFetcher();
		return <fetcher.Form method='PATCH' className='text-right'>
			<Button type="primary">Make priority</Button>
		</fetcher.Form>
		...

		export async function action({request, params}) {
			console.log('update');
			return null
		}


		@App.jsx - connect action function in the orderId route definition
		...
		import {action as updateOrderAction} from './features/order/UpdateOrder'
		...
		const router = createBrowserRouter(
			[
				{
					element: <AppLayout />,
					errorElement: <Error />,
					children: [
						...
						{
							path: '/order/:orderId',
							element: <Order />,
							loader: orderLoader,
							errorElement: <Error />,
							action: updateOrderAction
						}
					]
				}
			]
		)


		@UpdateOrder.jsx - call the function that would perform the patch request
		...
		export async function action({request, params}) {
			await updateOrder(params.orderId, {priority: true})
			return null
		}


		// WHY GO THROUGH THIS APPROACH OF USING FETCHER.FORM
				THE CONCEPT
					- because of revalidation. what i mean be this is
					- think of a page that is rendered based on information gotten from a server.
					- think of a button element on the page which on-clicked will update the information on the server.
					- dont you think it make sense for the page to refetch the information from the server & re-render? YES IT SHOULD.
					- this is revalidation.

				THE IMPLEMENTATION
					- lets think of the orderId page.
					- via the registered loader function we fetch information about the orderId and then render this information on the page.
					- via the registered action function when a form is submitted in the page, the function is called with the data from the form which would update information in the server.

					- because of the fetcher.form approach, 
					- once react-router notices that the action function has been called & returned,
					- react-router knows to call the loader function again & re-render the orderId page with the new information.
					- this automation is so helpful especially for highly interactive web application

**/










/***

// 3FH76L

HOW TO PLAN & BUILD A REACT APPLICATION


Thinking in REACT ( this works for small application with only one page & little features)
    - Break the desired UI into components
    - Build a static version (no state yet)
    - Think about state management + data flow
    


in real world application we need to adapt this processs (remember this is an overview - in the real world things are not linear)

    1) gather application requirements & features

    2) divide the application into pages
            - think about the overall & page-level UI
            - break the desired UI into components
            - design and build a static version (no state yet)

    3) divide the application into feature categories
            - think about state management + data flow for each categories (what data needs & where to store that data)

    4) decide on what libraries to use



Business ReQuirement of the application
    - users can order one or more pizzas from a menu.
    - requires no user accounts and no login: users just input their names before using the app.
    - the pizza menu can change, so it should be loaded from an API
    - users can add multiple pizzas to a cart before ordering
    - ordering requires just the user's name, phone number, and address
    - if possible, GPS location should also be provided, to make delivery easier
    - user's can mark their order as 'priority' for an additional 20% of the cart price
    - orders are made by sending a POST request with the order data ( user data + selected pizzas ) to the API
    - payments are made on delivery, so no payment processing is necessary in the app.
    - a unique ID will be given to each order that would be displayed, so the user can later look up the status of their delivery with this order.
    - after an order has been placed, user can mark this order as 'Priority'



This is a rough sketch & from this we look at the features we want to implement ( you will )
    - Derive the application main feature categories from the requirement
            - User : every feature related to the user identity
            - Menu : every feature related to loading & displaying the menu
            - Cart : take one or more item from menu & add to cart + update quantities of pizza types
            - Order : placing a new order, looking up an existing order e.t.c

    - The Necessary pages
            - Then Homepage (/) - where the user wiill input thier name
            - The Pizza menu (/menu)
            - The Cart (/cart)
            - Placing a new order (/order/new) 
            - Looking up an order (/order/:orderID)

    
    - State Management 
            actually the feature categories map well to the state domains/slices for our application
            - User : Global UI state (no accounts, stays in app)
            - Menu : Global Remote state (menu is fetched from API)
            - Cart : Global UI state (no need for API, just stored in app)
            - Order : Global Remote state (fetched and submitted to API)

    
    - Technology Decisions
            - Routing : React Router
            - Styling : TailwindCss
            - Remote state management : React Router ( they now provide a new way of fetching data right inside react router (v6.4+) here we render-as-we-fetch instead of fetch-on-render) (fetching data into pages & sending data using forms)
            - UI state managment : Redux (state is fairly complex & redux has many advantages for UI state)


    do you see how the 'business requirment' led to the 'feature categories' which led to the 'necessary pages' for the application









Introduction to React Router Version 6
        using the latest format of setting up routes by with react-router-dom version 6 comes a new way of setting up routes.

        with this format comes support for fetching remote data from a server to be rendered on the page. this way data is fetched in line with the rendereing process instead of fetching the data with useEffect after the page as rendered

        with this format comes an easy support for specifying a page-loading-icon & an error-page


How to Set up Routes with React Router Version 6
        basically we utilize an inbuilt function called 'createBrowserRouter'.

                import {createBrowserRouter, RouteProvider} from 'react-router-dom';

                const routes = createBrowserRouter([
                        {
                                path: '/',
                                element: <Home />,
                        },
                        {
                                path: '/about',
                                element: <About />
                        }
                ])

                function App() {
                        return <RouteProvider route={route} />
                }





How to Set up Nested Routes with React Router Version 6

        const routes = createBrowserRouter([
                {
                        element: <AppLayout />,
                        children: [
                                {
                                        path: '/',
                                        element: <Home />,
                                },
                                {
                                        path: '/about',
                                        element: <About />
                                }
                        ]
                },
        ])


Data Loading Concept in React Router Version 6
        this concept is all about how data fetching in react router and the primary advantage of this is that the data start fetching as the page starts rendering instead of after.

        this implementation involves 4 steps
                1.) Specifying the asynchronous function that fetches data from the API and then returns the data
                        
                        export funtion async loader() {
                                // fetching logic

                                ....
                                
                                // return the actual data
                                return data
                        }

                2.) Attach the data loader function to the Route


                     @App.jsx
                        import {loader as moviesLoader} from './Movies'

                        const routes = createBrowserRouter([

                                ...
                                {
                                        path: '/movie-list',
                                        element: <MovieList />,
                                        loader: moviesLoader
                                }
                        ])


                3.) Consume Loaded Data

                     @MovieList.jsx
                        function MovieList() {
                                const movies = useLoaderData();
                        }

                
                4.) Display loading icon to keep track of fetching state (optional)

                     this is done using the useNavigation hook. it can be used anywhere in the application. most times the loader element  is placed in the Application layout.

                     function AppLayout(){
                        const navigation = useNavigation();
                        const isLoading = navigation.state == 'loading';

                        ...
                     }






Url Parameters in React Router Version 6
        previously in react router, to obtain the url parameters, one would use the useParams OR useSearchParams hook right.

        this would not work here because hooks are only used within a react component But the loader function is simply a native function.

        thus to obtain the parameters in this case, react-router would pass as argument a params object to your loader function. in this object you can get the value of your URL parameters.

                export async function loader({params}) {

                        // from url of shape '/order/:orderId'
                        const data = await getOrdersFromAPI(params.orderId)

                        // return data
                }




Error Handling in React Router Version 6
        when an error occurs in a react router v6 route, you can specify and error element that can catch the error the display a component that interpretes the error to the user via a UI.

        IF the route does not specify an error element, the error would bubble up to its parent route & the error element at the parent route would handle the error.

        Once an Error Element is specified, in the Error Component utilize the 'useRouterError hook' to get information about the error 

                function Error() {
                        const navigate = useNavigate();
                        const error = useRouterError();

                        return <p>{error.data || error.message}</p>
                }




Data Actions Concept in React Router Version 6
        react-router provides a way to submit data to a server with ease.
        to understand how it is done, i will break the story into 3 chapters

        Chapter 1: form submission in html/css
                - in html & css, submitting a form was quite easy
                - we specigy to the form element the HTTP METHOD to use
                - we specify to the form elelment the route address of the server
                - that is all. automatically when the form is submitted, 
                - it would get the name/values of the form fields in it, place them in and object & make a request to the server.


        Chapter 2: form submission in react
                - all form fields in a form that was connected to a state that keeps track of their data
                - we would then have a function that we handle submission in the form which obtain the data of each form field from its state 
                - finally we make a post API call to the server in this function


        Chapter 3: form sumission in react-router-6
                - react-router-6 takes us back to the form submission is done in html/css
                - it provides a Form component 
                - where we specify via the method prop the HTTP METHOD to use
                - where we also specify via the action prop the route of our application we want to submit the form to

                        @CreateOrder.jsx
                        <Form method='POST' action='/order/new'>
                                ...
                        <Form>

                - when the form is submitted by clicking a button that resides in it
                - it would automatically get the name/values of all form field element & submit a request to the route specified

                - meanwhile when declaring the route (/order/new) in our application, 
                - we would have specified a function. this function will receive & deal with request

                        @App.jsx
                        ...
                        import {action as createOrderAction} from '...'
                        ...
                        const route = createBrowserRouter({
                                ...
                                {
                                        path: '/order/new',
                                        element: <CreateOrder />,
                                        action: createOrderAction
                                },
                                ...
                        }) 

                        ...

                - lets look at the funtion
                        @CreateOrder.jsx
                        ...
                        export const async action = ({request}) => {

                                // obtain form data from the request
                                let formData = await request.formData;

                                // transform FormData class object to an object
                                formData = Object.entries(formData)

                                console.log(formData)

                                // submit form data
                                const newOrder = await createOrder(formData)

                                // redirect to another route (this redirect function if passed in-builtly to the actions function)
                                redirect(`/order/${newOrder.id}`)

                                // this is important
                                return null

                        }




Form Validation in React Router Version 6
        - remember the actions function we talked about when we discussed the 'DATA ACTIONS CONCEPT'
        - remember we said (in code) that the function should return null

        - well to better explain it, 
        - the value returned in the action function can be accessed by the application route it is connected to via a 'useActionData hook'.

        - this is very interesting and a use case for this is when we plan to give feedback to the component based on submission action.
        - a very good usecase is for FORM VALIDATION

        - basically we process the form field value in the actions function
        - if the value is not in the format we want, we do not submit instead we return an error text
        - via the 'useActionData hook' the component listens, receives the error text & displsy it

                @CreateOrder.jsx
                ...
                export default const CreateOrder = () => {
                        ...
                        const formErrors = useActionData();
                        console.log(formError)
                        ...
                }

                ...


                export const async action = ({request}) => {
                        let formData = await request.formData;
                        formData = Object.entries(formData)

                        let errors = {}
                        if (!isValidPhoneNumber(formData.phone)) errors.phone = 'Please give us your correct phone number. We might need it to contact you.'
                        if (!isValidID(formData.id)) errors.id = 'Please give us a valid identification number. We need it for verification'
                        if (Object.keys(errors).length > 0) return errors

                        ...
                }
        - this is what i mean

**/
